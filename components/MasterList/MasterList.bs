' By juliantoro91.  More info: https://github.com/juliantoro91

sub init()
    initialSetup()
    initComponents()
    setVariables()
    setObservers()
end sub

sub initialSetup()
    initialSettings = {
        itemComponentName : ""
        wrap : true
        duration : 0.3
        showTargetRects : true
        usePlainStyle : false
        fixedFocus : false
        enableAnimation : true
        numRects : 0
        minFocused : 0
        maxFocused : 0
        cardWidth : 0
        cardHeight : 0
        cardSpacing : 0
        verticalList : false
        advanceKey : "right"
        reverseKey : "left"
        ' Focus
        focusColor : "FFFFFF"
        focusThickness : 0
        focusCornerRadius : 0
    }

    m.top.update(initialSettings, true)

    m.settings = initialSettings
end sub

sub initComponents()
    m.focus = m.top.findNode("focus")
    m.focusAnimation = m.top.findNode("focusAnimation")
    m.focusAnimInterp = m.top.findNode("focusAnimInterp")
end sub

sub setVariables()
    m.indexes = {
        targetSet : 0
        maxTargetSet: 0
        content : 0
        maxContent : 0
    }

    m.navigation = {
        active : false
        press : false
        key : ""
    }
end sub

sub setObservers()
    m.top.observefield("currFocusItemIndex", "onCurrFocusItemIndexChange")
    m.top.observefield("itemSelected", "onItemSelectedChange")
    m.top.observefield("itemFocused", "onItemFocusedChange")
    m.top.observefield("itemUnfocused", "onItemUnfocusedChange")
    m.top.observefield("content", "onContentChange")
end sub

' itemComponentName
' wrap
' duration
' showTargetRects
' numRects
sub configureComponent(event as object)
    settings = event.getData()

    m.top.update(settings, true)

    ' Keys for navigation
    if m.top.verticalList
        m.top.advanceKey = "down"
        m.top.reverseKey = "up"
    else
        m.top.advanceKey = "right"
        m.top.reverseKey = "left"
    end if

    setupRects()
    m.top.targetSet = m.sets[m.indexes.targetSet]

    ' Apply clipping rect to discard flashing cards
    x = 0
    y = 0
    width = m.top.verticalList ? m.top.cardWidth : (m.top.cardWidth + m.top.cardSpacing) * m.top.numRects - m.top.cardSpacing
    height = m.top.verticalList ? (m.top.cardHeight + m.top.cardSpacing) * m.top.numRects - m.top.cardSpacing : m.top.cardHeight
    m.top.clippingRect = [x, y, width, height]

    ' Update settings
    updateSettings()

    ' Add focus
    configureFocusObject()
    animateFocus(false)
    m.focusAnimation.duration = m.top.duration
end sub

sub onContentChange(event as object)
    content = event.getData()

    m.indexes.maxContent = content.getChildCount() - 1
end sub

sub setupRects()
    m.sets = generateTargetSets()
end sub

function generateTargetSets() as object
    ' Adjustment required for the presence of flashing cards
    minFocused = m.top.minFocused + 1
    maxFocused = m.top.maxFocused + 1

    ' Control variables
    numRects = m.top.numRects
    minFocused = minFocused
    maxFocused = (m.top.maxFocused > minFocused) ? maxFocused : numRects
    maxFocused = m.top.fixedFocus ? minFocused : maxFocused

    ' Configure sets
    sets = createObject("roArray", (maxFocused - minFocused) + 1, false) ' TODO: Check if it's practical to block resizing

    setIndex = 0
    for i = minFocused to maxFocused
        sets[setIndex] = generateTargetSet(i)
        setIndex++
    end for

    m.indexes.maxTargetSet = sets.count() - 1

    return sets
end function

function generateTargetSet(focusIndex as integer) as object
    numRects = m.top.numRects + 2 ' This value is added to avoid flashing cards

    set = createObject("roSGNode", "TargetSet")
    rects = createObject("roArray", numRects, false)

    isVertical = m.top.verticalList
    width = m.top.cardWidth
    height = m.top.cardHeight
    spacing = m.top.cardSpacing
    x = isVertical ? 0 : -(width + spacing)
    y = isVertical ? -(height + spacing) : 0
    offset = m.top.usePlainStyle ? 0 : 5
    widthOffset = m.top.usePlainStyle ? 0 : 20
    heightOffset = m.top.usePlainStyle ? 0 : 10

    for i = 0 to numRects - 1
        rects[i] = [
            x,
            y,
            i = focusIndex ? width + widthOffset : width,
            i = focusIndex ? height + heightOffset : height
        ]

        rects[i][isVertical ? 0 : 1] += (i = focusIndex) ? offset : 0

        if isVertical
            y = y + height + spacing
        else
            x = x + width + spacing
        end if
    end for

    set.targetRects = rects
    set.focusIndex = focusIndex

    return set
end function

sub configureFocusObject()
    m.focus.settings = {
        width : m.top.cardWidth, height : m.top.cardHeight, color : m.top.focusColor,
        thickness : m.top.focusThickness, cornerRadius : m.top.focusCornerRadius
    }
end sub

function onKeyEvent(key as string, press as boolean) as boolean
    m.navigation.press = press
    m.navigation.key = key

    if not press
        m.top.advancing = false
        m.top.reversing = false
        return false
    end if
    if m.navigation.active = true then return true

    result = false

    if key = m.top.reverseKey
        m.top.advancing = false
        m.top.reversing = true
        moveBackguard()
        result = true
    else if key = m.top.advanceKey
        m.top.advancing = true
        m.top.reversing = false
        moveForward()
        result = true
    end if

    return result
end function

sub moveBackguard()
    nextContentIndex = (m.indexes.content > 0) ? m.indexes.content - 1 : (m.top.wrap ? m.indexes.maxContent : 0)
    nextTargetSetIndex = (m.indexes.targetSet > 0) ? m.indexes.targetSet - 1 : 0

    navigateAction(nextContentIndex, nextTargetSetIndex)
end sub

sub moveForward()
    nextContentIndex = (m.indexes.content < m.indexes.maxContent) ? m.indexes.content + 1 : (m.top.wrap ? 0 : m.indexes.maxContent)
    nextTargetSetIndex = (m.indexes.targetSet < m.indexes.maxTargetSet) ? m.indexes.targetSet + 1 : m.indexes.maxTargetSet

    navigateAction(nextContentIndex, nextTargetSetIndex)
end sub

sub navigateAction(nextContentIndex as integer, nextTargetSetIndex as integer)
    if nextTargetSetIndex <> m.indexes.targetSet
        m.indexes.targetSet = nextTargetSetIndex
        if m.top.enableAnimation
            m.top.animateToTargetSet = m.sets[m.indexes.targetSet]
        else
            m.top.targetSet = m.sets[m.indexes.targetSet]
        end if
        animateFocus(m.top.enableAnimation)
    end if

    if nextContentIndex <> m.indexes.content
        m.indexes.content = nextContentIndex
        if m.top.enableAnimation
            m.top.animateToItem = m.indexes.content
        else
            m.top.jumpToItem = m.indexes.content
        end if
    end if
end sub

sub onCurrFocusItemIndexChange(event as object)
    data = event.getData()

    if data - int(data) = 0 and m.navigation.press = true and m.top.enableAnimation
        if m.navigation.key = m.top.reverseKey
            moveBackguard()
        else if m.navigation.key = m.top.advanceKey
            moveForward()
        end if
    end if
end sub

sub animateFocus(animate=true as boolean)
    targetSet = m.sets[m.indexes.targetSet]

    index = targetSet.focusIndex
    rect = targetSet.targetRects[index]
    targetTranslation = [rect.x, rect.y]

    if animate
        m.focusAnimInterp.keyValue = [m.focus.translation, targetTranslation]
        m.focusAnimation.control = "start"
    else
        m.focus.translation = targetTranslation
    end if
end sub

sub onItemFocusedChange()
    m.navigation.active = false
end sub

sub onItemUnfocusedChange()
    m.navigation.active = true
end sub

sub updateSettings()
    for each key in m.settings
        m.settings[key] = m.top[key]
    end for
end sub


' Interfaces to check
'' currTargetSet
'' easeFunction
'' advancing
'' reversing

' GETTERS
function get(key as string) as dynamic
    getters = {
        top : m.top
        settings : m.settings
        dimensions : function () as object
            return m.top.clippingRect
        end function
        settings : function () as object
            return m.settings
        end function
    }

    value = getters[key]

    return type(value) = "roFunction" ? value() : value
end function
