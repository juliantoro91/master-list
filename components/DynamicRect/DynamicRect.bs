sub init()
end sub

sub configureDynamicRect(event as object)
    settings = event.getData()

    m.params = {
        width : settings.width
        height : settings.height
        color : settings.color
        thickness : settings.thickness
    }

    renderDynamicRect()
end sub

sub renderDynamicRect()
    draw = CreateObject("roBitmap", {width: m.params.width, height: m.params.height, AlphaEnable: true})

    color = {
        full : colorHexToInt(m.params.color, 255)
        trans : colorHexToInt(m.params.color, 0)
    }

    centerx = Int(m.params.width/2) + 1
    centery = Int(m.params.height/2) + 1
    radio = Int(m.params.height/2)
    thickness = m.params.thickness ?? radio

    for x = 0 to m.params.width - 1
        for y = 0 to m.params.height - 1
            tempColor = color.trans
            value = (x - centerx)^2 + (y - centery)^2
            if (radio - thickness)^2 <= value and value <= radio^2
                tempColor = color.full
            end if
            draw.drawPoint(x, y, 1, tempColor)
        end for
    end for

    midWidth = m.params.width / 2
    midHeight = m.params.height / 2
    for i = 0 to 1
        for j = 0 to 1
            tempPNG = draw.getPng(i*midWidth, j*midHeight, midWidth, midHeight)
            tempPNG.writeFile(`tmp:/temp${i}${j}.png`)
        end for
    end for

    poster = CreateObject("roBitmap", {width: m.params.width * 1.5, height: m.params.height * 1.5, AlphaEnable: true})
    for i = 0 to 1
        for j = 0 to 1
            bm = CreateObject("roBitmap", `tmp:/temp${i}${j}.png`)
            poster.drawObject(i*2*midWidth, j*2*midHeight, bm)
            DeleteFile(`tmp:/temp${i}${j}.png`)
        end for
    end for
    tempPNG = poster.getPng(0, 0, poster.getWidth(), poster.getHeight())
    tempPNG.writeFile("tmp:/temp.png")

    m.top.width = poster.getWidth()
    m.top.height = poster.getHeight()
    m.top.uri = "tmp:/temp.png"
    m.top.translation = [100, 100]
end sub

function colorHexToInt(colorHex as object, alpha as integer)
    color = CreateObject("roByteArray")
    color.fromHexString(colorHex)

    return (color[0] * 256^3) + (color[1] * 256^2) + (color[2] * 256) + alpha
end function
