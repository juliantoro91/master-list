enum Types
    check = "checkbox"
    num = "number"
end enum

enum SubTypes
    int = "integer"
    flo = "float"
end enum

sub init()
    m.top.id = "configBanner"

    m.settings = {}
    m.settingsContainer = m.top.findNode("settingsContainer")

    m.focusController = {
        focusedItem : 1
        totalItems : 0
        minFocusedItem : 1
    }

    m.top.observeField("settings", "configureComponent")
    m.top.observeField("focusedChild", "onFocusChange")
end sub

sub onFocusChange()
    if m.top.hasFocus() then m.settingsContainer.getChild(m.focusController.focusedItem).setFocus(true)
end sub

sub configureComponent(event as object)
    settings = event.getData()
    m.settings.append(settings)

    m.title = m.settingsContainer.createChild("Label")
    m.title.width = 460
    m.title.height = 150
    m.title.text = "Master List Settings"
    m.title.color = "#D5D5D5"
    m.title.wrap = true
    m.title.numLines = 2
    m.title.lineSpacing = 0

    font = createObject("roSGNode", "Font")
    font.uri = "pkg:/fonts/Roboto-Bold.ttf"
    font.size = 60
    m.title.font = font

    ' Add configs
    configs = getConfigs()

    for each config in configs.items()
        createItem(config)
    end for

    m.focusController.totalItems = m.settingsContainer.getChildCount() - 1
end sub

sub createItem(config)
    nodeName = ""
    if config.value.type = Types.check
        nodeName = "CheckboxItem"
    else if config.value.type = Types.num
        nodeName = "NumberItem"
    end if

    item = CreateObject("roSGNode", nodeName)

    item.settings = {
        key : config.key
        label : config.value.label
        value : m.settings[config.key]
    }

    item.observeField("value", "onConfigItemChange")

    m.settingsContainer.appendChild(item)
end sub

function getConfigs() as object
    configs = {
        wrap : {
            label : "Enable Wrap"
            type : Types.check
        }
        duration : {
            label : "Animation Duration"
            type : Types.num
            subType : SubTypes.flo
        }
        showTargetRects : {
            label : "Show Target Rects"
            type : Types.check
        }
        usePlainStyle : {
            label : "Use Plain Style"
            type : Types.check
        }
        fixedFocus : {
            label : "Fixed Focus"
            type : Types.check
        }
        enableAnimation : {
            label : "Enable Animation"
            type : Types.check
        }
        numRects : {
            label : "Number of Rects"
            type : Types.num
            subType : SubTypes.int
        }
        minFocused : {
            label : "Minimum Focused"
            type : Types.num
            subType : SubTypes.int
        }
        maxFocused : {
            label : "Maximum Focused"
            type : Types.num
            subType : SubTypes.int
        }
        cardWidth : {
            label : "Card Width"
            type : Types.num
            subType : SubTypes.int
        }
        cardHeight : {
            label : "Card Height"
            type : Types.num
            subType : SubTypes.int
        }
        cardSpacing : {
            label : "Card Spacing"
            type : Types.num
            subType : SubTypes.int
        }
        verticalList : {
            label : "Vertical List"
            type : Types.check
        }
    }

    return configs
end function

sub onConfigItemChange(event as object)
    configItem = event.getRoSGNode()

    m.settings[configItem.key] = configItem.value
end sub

sub onKeyEvent(key as string, press as boolean) as boolean
    if not press then return false

    if key = "back"
        m.top.unObserveField("settings")
        m.top.settings = m.settings
        return false
    else if key = "down"
        if m.focusController.focusedItem < m.focusController.totalItems
            m.focusController.focusedItem++
            m.settingsContainer.getChild(m.focusController.focusedItem).setFocus(true)
        end if
    else if key = "up"
        if m.focusController.focusedItem > m.focusController.minFocusedItem
            m.focusController.focusedItem--
            m.settingsContainer.getChild(m.focusController.focusedItem).setFocus(true)
        end if
    end if

    return true
end sub
