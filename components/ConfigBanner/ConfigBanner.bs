enum Types
    check = "checkbox"
    num = "number"
end enum

enum SubTypes
    int = "integer"
    flo = "float"
end enum

sub init()
    m.top.id = "configBanner"

    m.settings = {}
    m.settingsContainer = m.top.findNode("settingsContainer")

    m.focusController = {
        focusedItem : 0
        totalItems : 0
        minFocusedItem : 0
    }

    m.top.observeField("settings", "configureComponent")
    m.top.observeField("focusedChild", "onFocusChange")
end sub

sub onFocusChange()
    if m.top.hasFocus() then m.settingsContainer.getChild(m.focusController.focusedItem).setFocus(true)
end sub

sub configureComponent(event as object)
    settings = event.getData()
    m.settings.append(settings)

    ' Add configs
    configs = getConfigs()

    for each config in configs.items()
        createItem(config)
    end for

    m.focusController.totalItems = m.settingsContainer.getChildCount() - 1
end sub

sub createItem(config)
    nodeName = ""
    if config.value.type = Types.check
        nodeName = "CheckboxItem"
    else if config.value.type = Types.num
        nodeName = "NumberItem"
    end if

    item = CreateObject("roSGNode", nodeName)

    settings = {
        key : config.key
        label : config.value.label
        value : m.settings[config.key]
    }

    if TypeValidation.isStringNotEmpty(config.value.route)
        route = (config.value.route ?? "").split(".")

        settings.append({
            route : config.value.route
            value : getValueWithRoute(m.settings, route)
        })
    end if

    if config.value.type = Types.num
        settings.subtype = config.value.subtype
    end if

    item.settings = settings

    item.observeField("value", "onConfigItemChange")

    m.settingsContainer.appendChild(item)
end sub

function getConfigs() as object
    configs = {
        wrap : {
            label : "Enable Wrap"
            type : Types.check
        }
        duration : {
            label : "Animation Duration"
            type : Types.num
            subType : SubTypes.flo
        }
        showTargetRects : {
            label : "Show Target Rects"
            type : Types.check
        }
        usePlainStyle : {
            label : "Use Plain Style"
            type : Types.check
        }
        fixedFocus : {
            label : "Fixed Focus"
            type : Types.check
        }
        enableAnimation : {
            label : "Enable Animation"
            type : Types.check
        }
        numRects : {
            label : "Number of Rects"
            type : Types.num
            subType : SubTypes.int
        }
        minFocused : {
            label : "Minimum Focused"
            type : Types.num
            subType : SubTypes.int
        }
        maxFocused : {
            label : "Maximum Focused"
            type : Types.num
            subType : SubTypes.int
        }
        cardWidth : {
            label : "Card Width"
            type : Types.num
            subType : SubTypes.int
        }
        cardHeight : {
            label : "Card Height"
            type : Types.num
            subType : SubTypes.int
        }
        cardSpacing : {
            label : "Card Spacing"
            type : Types.num
            subType : SubTypes.int
        }
        verticalList : {
            label : "Vertical List"
            type : Types.check
        }
        focusWidth : {
            label : "Focused width"
            type : Types.num
            subType : SubTypes.int
            route : "variableCardSize.width.0"
        }
        focusHeigth : {
            label : "Focused height"
            type : Types.num
            subType : SubTypes.int
            route : "variableCardSize.height.0"
        }
        ' TODO: scale method for variable size
        ' TODO: focusColor
        focusThickness : {
            label : "Focus Thickness"
            type : Types.num
        }
        focusCornerRadius : {
            label : "Focus Corner Rad."
            type : Types.num
        }
    }

    return configs
end function

sub onConfigItemChange(event as object)
    configItem = event.getRoSGNode()

    if TypeValidation.isStringNotEmpty(configItem.route)
        route = (configItem.route ?? "").split(".")

        m.settings = setValueWithRoute(configItem.value, m.settings, route)

    else
        m.settings[configItem.key] = configItem.value

    end if

end sub

function getValueWithRoute(settings as object, items as object) as object
    item = items.shift() ?? ""

    if TypeValidation.isStringNotEmpty(item)
        if TypeValidation.validateType(settings[item], ValueTypes.assArray)
            return getValueWithRoute(settings[item], items)

        else if TypeValidation.validateType(settings[item], ValueTypes.array)
            index = (items?[1] ?? "0").toInt()

            if settings[item]?[index] <> invalid
                return settings[item][index]
            else
                return invalid
            end if

        else
            return settings[item]

        end if
    end if

    return invalid
end function

function setValueWithRoute(value as dynamic, settings as object, items as object)
    item = items.shift() ?? ""

    if TypeValidation.isStringNotEmpty(item)
        if TypeValidation.validateType(settings[item], ValueTypes.assArray)
            settings[item] = setValueWithRoute(value, settings[item], items)

        else if TypeValidation.validateType(settings[item], ValueTypes.array)
            index = (items?[1] ?? "0").toInt()

            if settings[item].count() > index
                settings[item][index] = value
            else
                settings[item].push(value)
            end if

        else
            settings[item] = value

        end if
    end if

    return settings
end function

sub onKeyEvent(key as string, press as boolean) as boolean
    if not press then return false

    if key = "back"
        m.top.unObserveField("settings")
        m.top.settings = m.settings
        return false
    else if key = "down"
        if m.focusController.focusedItem < m.focusController.totalItems
            m.focusController.focusedItem++
            navigationController()
        end if
    else if key = "up"
        if m.focusController.focusedItem > m.focusController.minFocusedItem
            m.focusController.focusedItem--
            navigationController()
        end if
    end if

    return true
end sub

sub navigationController()'direction as string)
    focusedItem = m.settingsContainer.getChild(m.focusController.focusedItem)
    focusedItem.setFocus(true)

    clippingRect = m.settingsContainer.clippingRect
    minVisibleHeight = clippingRect.y
    maxVisibleHeight = clippingRect.height + clippingRect.y

    itemDimensions = focusedItem.boundingRect()
    itemHeight = itemDimensions.y + itemDimensions.height

    displacement = 0
    if itemHeight > maxVisibleHeight
        displacement = itemHeight - maxVisibleHeight
    else if itemHeight < minVisibleHeight
        displacement = itemHeight - minVisibleHeight - itemDimensions.height
    end if

    if displacement <> 0
        FromY = m.settingsContainer.translation
        m.settingsContainer.translation = [FromY[0], FromY[1] - displacement]

        m.settingsContainer.clippingRect = [
            clippingRect.x, clippingRect.y + displacement,
            clippingRect.width, clippingRect.height]
    end if
end sub
